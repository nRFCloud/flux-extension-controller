name: Release

on:
  workflow_dispatch:
    inputs:
        tag:
          description: 'Tag to release (e.g., v1.0.0)'
          required: true
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.25'

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Use the manually provided tag input
          TAG="${{ github.event.inputs.tag }}"
          VERSION="${TAG#v}"
        else
          # Extract from GITHUB_REF for tag pushes
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Chart.yaml with release version
      run: |
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" chart/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" chart/Chart.yaml

    - name: Run tests
      run: |
        go mod download
        make test

    - name: Prepare Image Name
      id: image_name
      run: |
        echo "name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ steps.image_name.outputs.name }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Package Helm chart
      run: |
        helm package chart --version ${{ steps.version.outputs.version }} --app-version ${{ steps.version.outputs.version }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          flux-extension-controller-${{ steps.version.outputs.version }}.tgz
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-helm-chart:
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout
      uses: actions/checkout@v5

    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.0'

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # Use the manually provided tag input
          TAG="${{ github.event.inputs.tag }}"
          VERSION="${TAG#v}"
        else
          # Extract from GITHUB_REF for tag pushes
          TAG="${GITHUB_REF#refs/tags/}"
          VERSION="${TAG#v}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update Chart.yaml with release version
      run: |
        sed -i "s/^version: .*/version: ${{ steps.version.outputs.version }}/" chart/Chart.yaml
        sed -i "s/^appVersion: .*/appVersion: \"${{ steps.version.outputs.version }}\"/" chart/Chart.yaml

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Image Name
      id: image_name
      run: |
        echo "name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

    - name: Package and push Helm chart to OCI registry
      run: |
        helm package chart --version ${{ steps.version.outputs.version }} --app-version ${{ steps.version.outputs.version }}
        helm push flux-extension-controller-${{ steps.version.outputs.version }}.tgz oci://${{ env.registry }}/${{ steps.image_name.outputs.name }}-chart
